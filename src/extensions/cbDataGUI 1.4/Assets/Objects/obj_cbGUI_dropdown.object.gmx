<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cbGUI_dropdown</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_cbGUI_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

_type = 6;

keys = undefined;           // raw key array or ds_map
value = undefined;          // value get when an item on popup is chosen
_visibleKeys = undefined;   // item names shown on the popup
_visibleKeyOnDropdown = undefined;  /* !!! item name shown on the dropdown button itself */
_lineNo = undefined;
_minLineNo = 0;
_maxLineNo = 5;
_scrollBar = false;
_lineOffset = 0; // needed for scrollbar
_scrollingStarted = false;
_scrollingStartY = undefined;
_skipScroll = false;

disabled = false;
_onFocus = false;
_open = false;
_hover = -1;
_skip = false;
_changed = false;

fontBody = cbGUIFont;
fontPopup = cbGUIFont;
halign = fa_left;
valign = fa_middle;

// light blue: make_color_rgb(151, 203, 255);
c_text = make_color_rgb(90, 90, 90);
c_fText = make_color_rgb(80, 80, 80);
c_disabledText = make_color_rgb(120, 120, 120);
c_text_popup_normal = make_color_rgb(80, 80, 80);
c_text_popup_hover = make_colour_rgb(255, 255, 255);
c_popup_hover = make_color_rgb(151, 203, 255);
c_scrollbar_bg = make_color_rgb(120, 120, 120);
c_scrollbar = make_color_rgb(10, 10, 10);

_leftPadding  = 10;  // px
_rightPadding = 10;  // px
_vOffset = -2; // px text offset to center text vertically

// sprite properties
sprite_index = spr_cbGUI_dropdown;          // 3slices
sprite_icon = spr_cbGUI_dropdown_ico; 
sprite_popup = spr_cbGUI_dropdown_pop;      // 9slices
sprite_seperator = spr_cbGUI_dropdown_sep;  // 3slices

// scale
_bodyW = 220;
_bodyH = 24;

_popupLH = 25;  //px lineheight in the popup
_popupOffset = -4;  // px. vertical distance between dropdown and popup
_popupTopPadding = 4;
_popupBottomPadding = 4;
_popupX1 = 0;
_popupY1 = 0;
_popupX2 = 0;
_popupY2 = 0;

_scrollBarH = 0;
_scrollBarW = 10;
_scrollBarRightPadding = 1;
_scrollBarTopPadding = 1;
_scrollBarBottomPadding = 3;
_sbX1 = 0;
_sbX2 = 0;
_sbY1 = 0;
_sbY2 = 0;

_iconX = 0;
_iconY = 0;
_iconRightPadding = 1;
_iconTopPadding = 1;
_popupTextX = 0;
_popupTextW = 0;
_bodyTextW = 0;

_scr_dropdown_calcsizes();
_scr_dropdown_setpopup();
// scale ends

onChangeCallbackScript = undefined;
_oCargs = undefined;

/*
// array
var k;
k[@ 0] = "constrain";
k[@ 1] = "pizza";
k[@ 2] = "chrome";
k[@ 3] = "tomato";
k[@ 4] = "raspberry";
k[@ 5] = "machine learning";
k[@ 6] = "something very very long";
k[@ 7] = "1constrain";
k[@ 8] = "2pizza";
k[@ 9] = "3chrome";
k[@ 10] = "4tomato";
k[@ 11] = "5raspberry";
k[@ 12] = "6machine learning";
k[@ 13] = "7something very very long";
_scr_dropdown_setkeys(k);
*/

// ds_list
/*
var k;
k = ds_list_create();
k[| 0] = "constrain";
k[| 1] = "pizza";
k[| 2] = "chrome";
k[| 3] = "tomato";
k[| 4] = "raspberry";
k[| 5] = "machine learning";
k[| 6] = "something very very long";
_scr_dropdown_setkeys(k);
*/

/*
// ds_map
var k;
k = ds_map_create();
k[? "constrain"] = 111111;
k[? "pizza"] = 222222;
_scr_dropdown_setkeys(k);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// step
if (disabled) exit; // skip if disabled
if (!visible) exit;
if (_skip) exit;
if (!mouse_check_button(mb_left)) _scrollingStarted = false;

event_inherited();

_scr_dropdown_step_mouse();

_scr_cbGUI_remote_handler();
_scr_cbGUI_onChange_cb_handler();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// image 0 - normal
// image 1 - focus
// image 2 - disabled

var cText;

if (_onFocus) {
    image_index = 1;
    cText = c_fText;
} else if (disabled) {
    image_index = 2
    cText = c_disabledText;
} else {
    image_index = 0;
    cText = c_text;
}


d3d_transform_set_identity();
d3d_transform_set_rotation_z(rotation);
d3d_transform_add_translation(x, y, 0);
   
    // draw popup first
    if (_open) {
        scr_draw_9slices_ext(sprite_popup, 0, _popupX1, _popupY1, _popupX2, _popupY2, c_white, alpha);

        // popup text
        draw_set_font(fontPopup);
        draw_set_halign(halign);
        draw_set_valign(valign);
        
        draw_set_alpha(alpha);
        var lno;
        if (_scrollBar) lno = _maxLineNo;
        else lno = _lineNo;
        for (var i = 0; i &lt; lno; i++) {
            var th = _popupY1 + _popupTopPadding + _popupLH * (i + 1) - round(_popupLH / 2);  // text y
            var sh = _popupY1 + _popupTopPadding + _popupLH * (i + 1);  // seperator y
            var hh = _popupY1 + _popupTopPadding + _popupLH * i;// hover y
            
            // hover rect
            if (_hover == i) {
                draw_set_alpha(1);
                draw_set_color(c_popup_hover);
                draw_rectangle(1, hh, _bodyW-2, hh+_popupLH, false);
                draw_set_alpha(alpha);
                draw_set_color(c_text_popup_hover);
            } else {
                draw_set_color(c_text_popup_normal);
            }
            
            // popup text
            draw_text(_popupTextX, th, string(_visibleKeys[i+_lineOffset]));
            
            // seperator
            if (i+1 &lt; lno) {
                var sw = sprite_get_width(sprite_seperator)/3;
                draw_sprite_part_ext(sprite_seperator, image_index, 0,    0,  sw, sprite_get_height(sprite_seperator),  1,          sh, 1,  1, c_white, alpha);
                draw_sprite_part_ext(sprite_seperator, image_index, sw,   0,  sw, sprite_get_height(sprite_seperator), sw,          sh, (_bodyW-2*sw)/sw, 1, c_white, alpha);
                draw_sprite_part_ext(sprite_seperator, image_index, sw*2, 0,  sw, sprite_get_height(sprite_seperator), _bodyW-sw-1, sh, 1,  1, c_white, alpha);
            }
        }
        
        // draw scrollbar
        if (_scrollBar) {
            // scrollbar bg
            draw_set_color(c_scrollbar_bg);
            draw_set_alpha(1);
            draw_rectangle(_popupX2 - 2 * _scrollBarRightPadding - _scrollBarW, _popupY1 + _scrollBarTopPadding, 
                           _popupX2 - 2 * _scrollBarRightPadding, _popupY2 - _scrollBarTopPadding - _scrollBarBottomPadding, false);    
            
            // scrollbar itself
            draw_set_color(c_scrollbar);
            if (_scrollingStarted) draw_set_alpha(.8); // make it abit transparent when mouse clicked on it
            else draw_set_alpha(1);
            draw_rectangle(_sbX1, _sbY1, _sbX2, _sbY2, false);  
            /*draw_rectangle(_popupX2 - 2 * _scrollBarRightPadding - _scrollBarW, _popupY1 + (_lineOffset * _scrollBarH / lno) + 1, 
                           _popupX2 - 2 * _scrollBarRightPadding,  _popupY1 + (_lineOffset * _scrollBarH / lno) + _scrollBarH - 1, 
                           false);*/
        }    
        
    }

    // draw dropdown body
    var sw = sprite_get_width(sprite_index)/3;
    draw_sprite_part_ext(sprite_index, image_index, 0,   0,  sw, sprite_height,  0,          0, 1,  1, c_white, alpha);
    draw_sprite_part_ext(sprite_index, image_index, sw,  0,  sw, sprite_height, sw,          0, (_bodyW-2*sw)/sw, 1, c_white, alpha);
    draw_sprite_part_ext(sprite_index, image_index, sw*2,0,  sw, sprite_height, _bodyW-sw, 0, 1,  1, c_white, alpha);
    
    // draw body text
    draw_set_font(fontBody);
    draw_set_halign(halign);
    draw_set_valign(valign);
    
    draw_set_alpha(alpha);
    draw_set_color(cText);

    if (_visibleKeyOnDropdown != undefined) {
        switch (halign) {
            case fa_left:
                draw_text(_leftPadding, round((_bodyH + _vOffset)/ 2), _visibleKeyOnDropdown);
                break;
            case fa_center:
                draw_text(ceil((_bodyW - _iconX)/ 2), round((_bodyH + _vOffset)/ 2), _visibleKeyOnDropdown);
                break;
            case fa_right:
                draw_text(_bodyW-(_rightPadding + _iconX), round((_bodyH + _vOffset)/ 2), _visibleKeyOnDropdown);
                break;
        }    
    }
     
    // draw icon
    draw_sprite(sprite_icon, image_index, _iconX, _iconY);

    
/*    
    // debug
    draw_set_font(cbGUIDebugFont);
    draw_set_colour(c_black);
    draw_set_halign(fa_left);
    draw_text(0, -8, "f:"+string(_onFocus)+ ", " + 
                     "o:"+string(_open)+ ", " +
                     "h:"+string(_hover)+ ", " +
                     "lo:"+string(_lineOffset)+ ", " +
                     "ss?"+string(_scrollingStarted)+ ", " +
                     "");

    // bounding box
    draw_set_alpha(.4);
    draw_set_colour(c_red);
    draw_rectangle(bbox_left-x, bbox_top-y, bbox_right-x, bbox_bottom-y, false);
*/ 

d3d_transform_set_identity();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Do nothing

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///keyboard interactions
event_inherited();

if (disabled) exit; // skip if disabled
if (!visible) exit;
if (!_onFocus) exit; // skip if not on focus

var k = keyboard_lastkey;
   
switch (k) {

    case (vk_escape): 
        // cancel
        if (_open) _scr_dropdown_openpopup(false);
        else _onFocus = false;
        // changed
        break;

    case (vk_enter): case(vk_space):
        // if opened, close popup
        if (_open) {
            if (_hover != -1) {
                _scr_dropdown_setvaluebyitemno(_hover);
                _scr_dropdown_onchange();
            }
            _scr_dropdown_openpopup(false);
        }
        // if closed, open popup
        else _scr_dropdown_openpopup(true);
        break;       

    case (vk_up): 
        // move up
        if (_open) {
            _hover--;
            if (_hover &lt;= 0 &amp;&amp; _lineOffset &gt; 0) {
                _lineOffset--;
                _hover = 0;
                _scr_dropdown_setscrollbar();
            }
            _hover = clamp(_hover, 0, array_length_1d(_visibleKeys)-1);
        }
        break;

    case (vk_down): 
        // move down
        if (_open) {
            _hover++;
            if (_hover &gt;= _maxLineNo-1) {
                _lineOffset++;
                _hover = _maxLineNo-1;
                _scr_dropdown_setscrollbar();
            }
            _hover = clamp(_hover, 0, array_length_1d(_visibleKeys)-1);
        }
        break;

}

keyboard_lastkey = -1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
