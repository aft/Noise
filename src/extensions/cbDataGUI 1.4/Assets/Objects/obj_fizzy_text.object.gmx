<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Based on the Google's datGUI FizzyText example
// https://workshop.chromeexperiments.com/examples/gui/#1--Basic-Usage
// Reverse engineered &amp; ported to GML by Cem Baspinar

message = "";
growthSpeed = .8;           // how fast do particles change size?
minSize = 0;
maxSize = 7.5;              // how big can they get?
noiseStrength = 10;         // how turbulent is the flow?
pSpeed = 0.16;              // how fast do particles move?
displayOutline = false;     // should we draw the message as a stroke?
displayFlowNoise = false;
noiseScale = 1;
pAlpha = 1;
numOfParticles = 1000;

color1 = make_colour_rgb(0,174,255);
color2 = make_colour_rgb(15,169,84);
color3 = make_colour_rgb(84,57,110);
color4 = make_colour_rgb(230,29,95);
color_array[0] = color1; color_array[1] = color2; 
color_array[2] = color3; color_array[3] = color4; 

xoffset = 0;
yoffset = 0;

fizzyFont = cbDataGUIFizzyText;

particles = -1;
pBuffer = -1;
pSurface = -1;
fSurface = -1;
fBuffer = -1;

width = string_width(message);
height = string_height(message);

// Instantiate some particles
var dep = 4;
for (var i=0; i&lt;dep; i++) {
    for (var j=0; j&lt;numOfParticles/dep; j++){
        var p = instance_create(xoffset+width * random(1), yoffset+height * random(1), obj_fizzy_text_particle);
        with (p) {
            depth = -i;
            container = other;
            color = container.color_array[@i];
        }
        particles[i*numOfParticles/dep+j] = p;
    }
}


randomize();
scr_sn_init();
scr_ft_set_message("FizzyText");
scr_ft_create_flow_field();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_ft_create_flow_field();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (scr_cbDataGUI_has_row(obj_fizzy_text, "message")) {
    message = scr_cbDataGUI_get_value(obj_fizzy_text, "message");
}

if (scr_cbDataGUI_has_row(obj_fizzy_text, "pSpeed")) {
    pSpeed = scr_cbDataGUI_get_value(obj_fizzy_text, "pSpeed");
}

if (scr_cbDataGUI_has_row(obj_fizzy_text, "displayOutline")) {
    displayOutline = scr_cbDataGUI_get_value(obj_fizzy_text, "displayOutline");
}

if (scr_cbDataGUI_has_row(obj_fizzy_text, "noiseStrength")) {
    noiseStrength = scr_cbDataGUI_get_value(obj_fizzy_text, "noiseStrength");
}

if (scr_cbDataGUI_has_row(obj_fizzy_text, "growthSpeed")) {
    growthSpeed = scr_cbDataGUI_get_value(obj_fizzy_text, "growthSpeed");
}

if (scr_cbDataGUI_has_row(obj_fizzy_text, "minSize")) {
    minSize = scr_cbDataGUI_get_value(obj_fizzy_text, "minSize");
}

if (scr_cbDataGUI_has_row(obj_fizzy_text, "maxSize")) {
    maxSize = scr_cbDataGUI_get_value(obj_fizzy_text, "maxSize");
}

if (scr_cbDataGUI_has_row(obj_fizzy_text, "displayFlowNoise")) {
    displayFlowNoise = scr_cbDataGUI_get_value(obj_fizzy_text, "displayFlowNoise");
}

if (scr_cbDataGUI_has_row(obj_fizzy_text, "noiseScale")) {
    noiseScale = scr_cbDataGUI_get_value(obj_fizzy_text, "noiseScale");
}

if (scr_cbDataGUI_has_row(obj_fizzy_text, "pAlpha")) {
    pAlpha = scr_cbDataGUI_get_value(obj_fizzy_text, "pAlpha");
}

if (scr_cbDataGUI_has_row(obj_fizzy_text, "color1")) {
    color1 = scr_cbDataGUI_get_value(obj_fizzy_text, "color1");
}

if (scr_cbDataGUI_has_row(obj_fizzy_text, "color2")) {
    color2 = scr_cbDataGUI_get_value(obj_fizzy_text, "color2");
}

if (scr_cbDataGUI_has_row(obj_fizzy_text, "color3")) {
    color3 = scr_cbDataGUI_get_value(obj_fizzy_text, "color3");
}

if (scr_cbDataGUI_has_row(obj_fizzy_text, "color4")) {
    color4 = scr_cbDataGUI_get_value(obj_fizzy_text, "color4");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_ft_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (displayFlowNoise) {
    if (surface_exists(fSurface)) {
        draw_surface_ext(fSurface, xoffset, yoffset, 1, 1, 0, c_white, 1);
    }
}

if (displayOutline) {
    if (surface_exists(pSurface)) {
        draw_surface_ext(pSurface, xoffset, yoffset, 1, 1, 0, c_white, .5);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
