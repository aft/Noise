<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// for tab switching
if (id == instance_find(obj_cbGUI_parent, 0)) {
    global._cbGUI_component_controller = id;
    _tabbed = undefined;
    _list = undefined;
    global._cbGUI_depth_tracker = ds_list_create(); // for depth tracking
}

// for remote controlling
_target = noone;
_targetVariable = undefined;
_modifyTarget = false;

// for remote listening 
_listen = noone;
_listenVariable = undefined;

value = "";
disabled = false;
_onFocus = false;
_tabbable = true;

image_speed = 0;
image_angle = 0;

alpha = 1;
rotation = 0;

_nx = 0;
_ny = 0;

font = cbGUIFont;
halign = fa_left;
valign = fa_middle;

// set font for w and h calculations
draw_set_font(font);
draw_set_halign(halign);
draw_set_valign(valign);

guiSize = 1;
_appPos = application_get_position();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// for gui mouse x &amp; y
// gui mouse
var gui_mouse_x = device_mouse_x_to_gui(0);
var gui_mouse_y = device_mouse_y_to_gui(0);

if ((rotation mod 360) != 0) {
    //_nx = cos(degtorad(rotation)) * (gui_mouse_x - x) - sin(degtorad(rotation)) * (gui_mouse_y - y) + x;
    //_ny = sin(degtorad(rotation)) * (gui_mouse_x - x) + cos(degtorad(rotation)) * (gui_mouse_y - y) + y;
    _nx = dcos(rotation) * (gui_mouse_x - x) - dsin(rotation) * (gui_mouse_y - y) + x;
    _ny = dsin(rotation) * (gui_mouse_x - x) + dcos(rotation) * (gui_mouse_y - y) + y;
} else {
    _nx = gui_mouse_x;
    _ny = gui_mouse_y;
}

// for depth tracking
scr_cbGUI_track_depth_step(_nx, _ny);
// depth tracking ends


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (id == instance_find(obj_cbGUI_parent, 0) &amp;&amp; keyboard_lastkey == vk_tab) {
        
    _list = ds_list_create();
    with (all) {
        if (object_get_name(object_get_parent(object_index)) == "obj_cbGUI_parent") { // yuh
            if (!disabled &amp;&amp; visible &amp;&amp; _tabbable) {
                ds_list_insert(global._cbGUI_component_controller._list, 0, id); // to reverse the order
            }
        }
    }
    
    var next, found;
    if (global._cbGUI_component_controller._tabbed == undefined) { 
        found = ds_list_find_value(global._cbGUI_component_controller._list, 0);
    } else {
        next = ds_list_find_index(global._cbGUI_component_controller._list, global._cbGUI_component_controller._tabbed) + 1;
        found = ds_list_find_value(global._cbGUI_component_controller._list, next);
    }
    if (!found) found = ds_list_find_value(global._cbGUI_component_controller._list, 0);
    
    if (!is_undefined(found)) {
        if (instance_exists(found)) {
            _tabbed = found.id;
            
            with (obj_cbGUI_parent) {
                _onFocus = false;
            }
            found._onFocus = true;
        }
    } // else: no object found to tab to.
    
    ds_list_destroy(global._cbGUI_component_controller._list);

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
