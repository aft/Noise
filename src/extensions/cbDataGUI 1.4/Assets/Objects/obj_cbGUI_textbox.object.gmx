<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cbGUI_textbox</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_cbGUI_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/**
* 
*/

event_inherited();

_type = 0;

_bodyW = 190;
_bodyH = 32;

_txtLen = 0;
_txtW = 0;
_txtH = 0; 
_visibleTxt = "";
_lo = 0; //left offset
_ro = 0; //right offset
_visibleCursorPos = 0;
_rawValue = "";
_cursorX = 0;

_selected = false;
_cursorPos = 0;
_showCursor = true;
_selectionStarted = false;
_selection[0] = 0; _selection[1] = 0;
shadowEnabled = false;                      /*&lt; Variable description here. */
shadowOpacity = .5;
shadowColor = c_black;
shadowOffset = 1; //px
_changed = false;
_submitted = false;

c_text = make_color_rgb(40, 40, 40);
c_text_disabled = make_color_rgb(80, 80, 80);
c_cursor = make_color_rgb(151, 203, 255);
c_selection = make_color_rgb(151, 203, 255);
c_foutselection = make_color_rgb(203, 203, 203);
blinkSpeed = .25;
padding = 4; //px
indent = 2; //px
//if (os_browser != browser_not_a_browser) {

validateEveryChar = true;
allowedChars = " !\#$%&amp;*+,-./0123456789(){}[]:;&lt;=&gt;?@ABCÇDEFGHIJKLMNOÖPQRSTUÜVWXYZ_abcçdefghijklmnoöpqrstuüvwxyz";

// sprite properties
sprite_index = spr_cbGUI_textbox;

 
// get visible text area sizes
// everytime after the sprite changes
_scr_textbox_calcsizes();

// surface stuff
//_surface = -1;
//_surfaceW = power(2, _scr_getnearestpower(bbox_right-bbox_left, 2));
//_surfaceH = power(2, _scr_getnearestpower(bbox_bottom-bbox_top, 2));


onChangeCallbackScript = undefined;
onSubmitCallbackScript = undefined;
_oCargs = undefined;
_oSargs = undefined;

_scr_textbox_setblink();

// string_length("#")  //1
// string_length("\#") //2
// string_width("#")   //0px
// string_width("\#")  //10px with my fontface

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!disabled &amp;&amp; _onFocus &amp;&amp; !_selected) {
    _showCursor = !_showCursor;
    alarm_set(0, blinkSpeed*room_speed);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// step

if (disabled) exit; // skip if disabled
if (!visible) exit;
event_inherited();

_scr_textbox_step_mouse();
_scr_textbox_step_ctrl();

_scr_cbGUI_remote_handler();
_scr_cbGUI_onChange_cb_handler();
_scr_cbGUI_onSubmit_cb_handler();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///unfocus all textboxes in the room
_onFocus = false;

if (disabled) exit;
if (!visible) exit;

// gui mouse
var gui_mouse_x = device_mouse_x_to_gui(0);
var gui_mouse_y = device_mouse_y_to_gui(0);

if ((rotation mod 360) != 0) {
    _nx = cos(degtorad(rotation)) * (gui_mouse_x - x) - sin(degtorad(rotation)) * (gui_mouse_y - y) + x;
    _ny = sin(degtorad(rotation)) * (gui_mouse_x - x) + cos(degtorad(rotation)) * (gui_mouse_y - y) + y;
} else {
    _nx = gui_mouse_x;
    _ny = gui_mouse_y;
}

if (position_meeting(_nx, _ny, self) &amp;&amp; !disabled &amp;&amp; !_onFocus) {
    if (scr_cbGUI_mouse(true)) {
        _scr_cbGUI_setactive();
        // start blinking cursor
        _scr_textbox_setblink();
    }
}

_scr_textbox_invalidatesurface();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// image 0 - normal
// image 1 - focus
// image 2 - disabled

if (_onFocus) image_index = 1;
else if (disabled) image_index = 2
else image_index = 0;


d3d_transform_set_identity();
d3d_transform_set_rotation_z(rotation);
d3d_transform_add_translation(x, y, 0);

//if (!surface_exists(_surface)) {
//    _surface = surface_create(_surfaceW, _surfaceH);
//    surface_set_target(_surface);
//    draw_clear_alpha(c_yellow, 0.1);
    
    // draw textbox
    var sw = sprite_get_width(sprite_index)/3;
    draw_sprite_part_ext(sprite_index, image_index, 0,   0,  sw, sprite_height,  0,          0, 1,  1, c_white, alpha);
    draw_sprite_part_ext(sprite_index, image_index, sw,  0,  sw, sprite_height, sw,          0, (_bodyW-2*sw)/sw, 1, c_white, alpha);
    draw_sprite_part_ext(sprite_index, image_index, sw*2,0,  sw, sprite_height, _bodyW-sw, 0, 1,  1, c_white, alpha);

    // draw _selection box
    if (_selected) {
        var c;
        if (_onFocus) c = c_selection;
        else c = c_foutselection;
        draw_set_colour(c);
        var sx1 = _scr_textbox_textwidth(_selection[0]-_lo),
            sx2 = _scr_textbox_textwidth(_selection[1]-_lo);
        draw_rectangle( padding+indent+sx1, padding, 
                        padding+indent+sx2, _textH*2-padding-2, false);
    }
    
    // draw text
    draw_set_font(font);
    draw_set_halign(halign);
    draw_set_valign(valign);
    if (shadowEnabled) {
        draw_set_alpha(shadowOpacity);
        draw_set_colour(shadowColor);
        draw_text(padding+indent+shadowOffset, _textH+shadowOffset, _visibleTxt);
    }
    draw_set_alpha(1);
    if (disabled) draw_set_colour(c_text_disabled);
    else draw_set_colour(c_text);
    draw_text(padding+indent, _textH, _visibleTxt);
    
//    surface_reset_target();
//}

// draw surface
//draw_surface_ext(_surface, 0, 0, xScale, yScale, 0, c_white, alpha);

// draw cursor
if (_showCursor &amp;&amp; _onFocus &amp;&amp; !_selected) {
    draw_set_alpha(1);
    draw_set_colour(c_cursor);
    draw_rectangle( _cursorX+padding+indent, padding, 
                    _cursorX+padding+indent, _textH*2-padding-2, false);
}

d3d_transform_set_identity();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Do nothing

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///keyboard interactions
event_inherited();

if (disabled) exit; // skip if disabled
if (!visible) exit;
if (!_onFocus) exit; // skip if not on focus

var k = keyboard_lastkey;
var c = keyboard_lastchar;


switch (k) {

    case (vk_delete): 
        if (_selected) {
            // _selection present
            _scr_textbox_remove();
        } else {
            // no _selection
            if (_cursorPos+1 &lt;= _txtLen) {
               var offset = 0;
               if (string_char_at(value, _cursorPos+2) == "#") offset = 1;
               _selection[@0] = _cursorPos;
               _selection[@1] = _cursorPos+1+offset;
               _selected = true;
               _scr_textbox_remove();
            }
        }
        break;

    case (vk_backspace): 
        if (_selected) {
            // _selection present
            _scr_textbox_remove();
        } else {
            // no _selection
            var offset = 0;
            if (string_char_at(value, _cursorPos) == "#") offset = -1;
            _selection[@0] = _cursorPos-1+offset;
            _selection[@1] = _cursorPos;
            _selected = true;
            _scr_textbox_remove();
        }
        break;

    case (vk_enter): 
        // done editing
        _submitted = true;
        
        // cancel
        _scr_textbox_unselect();
        break;

    case (vk_escape): 
        // cancel
        _onFocus = false;
        _scr_textbox_invalidatesurface();
        break;
                 
    case (vk_left):
        if (keyboard_check(vk_shift)) {
            if (!_selected) {
                _selection[@0] = _cursorPos;
                _selection[@1] = _cursorPos;
                _selected = true;
            } 
            var offset = 0;
            if (string_char_at(value, _cursorPos) == "#") offset = -1;

            _selection[@1] = _selection[1] - 1 + offset;
            _selection[@1] = clamp(_selection[@1], 0, string_length(value));
            //_scr_textbox_setcursorpos(_selection[0]+1+offset);
            
            // scroll if needed
            if (_lo &gt; 0 &amp;&amp; _cursorX &lt;= 0) _scr_textbox_scrolltxt(-1+offset);
            if (abs(_selection[0] - _selection[1]) == 0) _scr_textbox_unselect();
            _scr_textbox_invalidatesurface();
        } else {
            _scr_textbox_unselect();
        }
        var offset = 0;
        if (string_char_at(value, _cursorPos) == "#") offset = -1;
        
        if (_lo &gt; 0 &amp;&amp; _cursorX &lt; 4) _scr_textbox_scrolltxt(-1+offset);
        _scr_textbox_setcursorpos(_cursorPos-1+offset);
        
        
        break;

                    
    case (vk_right): 
        if (keyboard_check(vk_shift)) {
            if (!_selected) {
                _selection[@0] = _cursorPos;
                _selection[@1] = _cursorPos;
                _selected = true;
            }
            var offset = 0;
            if (string_char_at(value, _cursorPos+2) == "#") offset = 1;
            
            _selection[@1] = _selection[@1] + 1 + offset;
            _selection[@1] = clamp(_selection[@1], 0, string_length(value));
            //_scr_textbox_setcursorpos(_selection[0]-1-offset);
            
             if (_ro &gt; 0 &amp;&amp; _cursorPos &gt;= _txtLen-_ro ) _scr_textbox_scrolltxt(1+offset);
            if (abs(_selection[0] - _selection[1]) == 0) _scr_textbox_unselect();
            _scr_textbox_invalidatesurface();
        } else {
            _scr_textbox_unselect();
        }
        var offset = 0;
        if (string_char_at(value, _cursorPos+2) == "#") offset = 1;
        
        if (_ro &gt; 0 &amp;&amp; _cursorPos &gt;= _txtLen-_ro ) _scr_textbox_scrolltxt(1);
        _scr_textbox_setcursorpos(_cursorPos+1+offset);
        
        
        break;    

                
    case (vk_up): case (vk_home):
        _scr_textbox_gotostart();
        break;

                
    case (vk_down): case (vk_end): 
        _scr_textbox_gotoend();
        break;

            
    default:
        if (_scr_check_valid_char(string(c))) {
            // _selection present
            if (_selected) {
                _scr_textbox_remove();
                _scr_textbox_setcursorpos(_cursorPos);
            }
            // no _selection
            _scr_textbox_inserttext(c);
        }
        break;

}

keyboard_lastkey = -1;
keyboard_lastchar = '';
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
