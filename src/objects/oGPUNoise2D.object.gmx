<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_overlay(true);
randomize();

_i = 0;

_shader = sha_noise_perlin_4d;
_seed = 0;
_pers = 0.65;
_freq = 16.0;
_scale = 1.0;
_time_as_z = true;


// Create the GUI using cbDataGUI extension
texture_set_interpolation(false);

scr_cbDataGUI_create();

// shader
var dsm = ds_map_create();
ds_map_add(dsm, "Perlin Noise", real(asset_get_index("sha_noise_perlin_4d")));
ds_map_add(dsm, "Simplex Noise", real(asset_get_index("sha_noise_simplex_4d")));

scr_cbDataGUI_add(oGPUNoise, "shader", cbData_type.number, -1, dsm);
scr_cbDataGUI_set_value(oGPUNoise, "shader", _shader);
ds_map_destroy(dsm);

// seed - string - numbers only
var s_gui = scr_cbDataGUI_add(oGPUNoise, "seed", cbData_type.text, -1);
scr_textbox_set_allowed_chars(s_gui._component, "0123456789-+");
scr_cbDataGUI_set_value(oGPUNoise, "seed", string(_seed));

// generate a random seed button
scr_cbDataGUI_add(oGPUNoise, "scr_generate_random_seed", cbData_type.function, -1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_seed = real(_seed) - 1;
scr_cbDataGUI_set_value(oGPUNoise, "seed", string(_seed));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_seed = real(_seed) + 1;
scr_cbDataGUI_set_value(oGPUNoise, "seed", string(_seed));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Get settings from the GUI
// shader
_shader = scr_cbDataGUI_get_value(oGPUNoise, "shader");
// seed
_seed = scr_cbDataGUI_get_value(oGPUNoise, "seed");

// Increase frame count
_i++;

// Draw shader result to the screen
shader_set(_shader);
    var frame = shader_get_uniform(_shader, "u_frame");
    shader_set_uniform_f(frame, _i);
    
    var res = shader_get_uniform(_shader, "u_resolution");
    shader_set_uniform_f(res, room_width, room_height);
    
    var seed = shader_get_uniform(_shader, "u_seed");
    shader_set_uniform_f(seed, _seed);

    var pers = shader_get_uniform(_shader, "u_persistence");
    shader_set_uniform_f(pers, _pers);
    
    var freq = shader_get_uniform(_shader, "u_freq");
    shader_set_uniform_f(freq, _freq);
    
    var scale = shader_get_uniform(_shader, "u_scale");
    shader_set_uniform_f(scale, _scale);
    
    draw_rectangle(0, 0, room_width, room_height, false);
    
shader_reset();


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
