<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize the test project

/*
Permission is granted to share the source code of your test projects, 
including this free Performance Test Framework, for purposes of peer review.

I strongly encourage you to share the source of the test projects 
you create in order to facilitate peer review.  It helps a great deal to have
others look at your test code to see if there are any errors with it that would give a 
misleading result, and to allow others to run your tests on other hardware in order to 
see if the results are different.

Put the url where your test project source code may be downloaded in the test_source_url variable, below.
*/
test_source_url = "http://example.com/this_test/index.html"; 


//Test names
test_project_title = "GPU Noise Performance Test"; //Name of your test project goes here.
Test1Name          = "Fixed Z"; //Name of test 1 goes here
Test2Name          = "Variable Z"; //Name of test 2 goes here
Test3Name          = "Create 256x256"; //Name of test 3 goes here
Test4Name          = "Create 1024x1024"; //Name of test 4 goes here
Test5Name          = "Create 2048x2048"; //Name of test 5 goes here

//Timing variables
test1_start_time   = 0;
test1_end_time     = 0;

test2_start_time   = 0;
test2_end_time     = 0;

test3_start_time   = 0;
test3_end_time     = 0;

test4_start_time   = 0;
test4_end_time     = 0;

test5_start_time   = 0;
test5_end_time     = 0;

test1_run_time     = 0;
test2_run_time     = 0;
test3_run_time     = 0;
test4_run_time     = 0;
test5_run_time     = 0;

test_iterations    = 1000;


//State Control variable

instructions       = 0;
test_running       = 1; 
test_run_complete  = 2;

state              = instructions;
started            = false;

show_debug_overlay(false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Instructions message

/*
Please don't alter any of the instructions text below.  
If desired you may change the ordering of the additional 
instructions, but please preserve the SPT authorship credits.
If you want to add additional instructions text, assign 
a string containing the additional instructions to the 
variable additional_instructions_text.
*/

//Your custom instructions text, if any, should go here. A good explanation of your tests, any assumptions, your contact info, etc. 
additional_instructions_text = ""; 

instructions_message = string(test_project_title) + " ##" +
                       "This test compares the performances of " + string(Test1Name) + ", " + string(Test2Name) + ", " + string(Test3Name) + ", " + string(Test4Name) + ", and " + string(Test5Name) + " ##" +
                       "Each method is tested " + string(test_iterations) + " times.  #" +
                       "Results are then displayed in microseconds (lower is better).##" +
                       "Press Enter key to run the test. Execution will take a few seconds and then results will display.##" +
                       "Feel free to download and review the code and run on your own platform to verify the results! ##"
                       ;
                       
//Credits
SPT_author_twitter  = "@csanyk";
SPT_author_website  = "https://csanyk.com";
SPT_marketplace_url = "https://marketplace.yoyogames.com/assets/449/simple-performance-test";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init test_running message

test_running_message = string(test_project_title) + " is running. ##Program may be unresponsive for several seconds or minutes.  ##Please be patient.";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>(state == test_running) &amp;&amp; started</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pre-test1 setup
//Any pre-test setup code should go here, before the timer starts
nn = gpu_noise_create(0, 0, 150, 150);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Run Test1
//Test1
test1_start_time = get_timer();

repeat(test_iterations)
{
    var n = irandom_range(0, 150);
    val = gpu_noise_3d(nn, n, n, 0);
    draw_set_color(make_color_hsv(0, 0, val*255));
    draw_rectangle(x, y, x+150, y+150, false);
}
test1_end_time   = get_timer();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Test2 Pre-test setup
//Any pre-test setup code should go here, before the timer starts
nn = gpu_noise_create(0, 0, 150, 150);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Run Test2

//Test2
test2_start_time = get_timer();

repeat(test_iterations)
{
    var n = irandom_range(0, 150);
    val = gpu_noise_3d(nn, n, n, n);
    draw_set_color(make_color_hsv(0, 0, val*255));
    draw_rectangle(x, y, x+150, y+150, false);

}
test2_end_time   = get_timer();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Test3 Pre-test setup
//Any pre-test setup code should go here, before the timer starts

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Run Test3

//Test3
test3_start_time = get_timer();

repeat(test_iterations)
{
    nn = gpu_noise_create(0, 0, 256, 256);
    gpu_noise_free(nn);
}
test3_end_time   = get_timer();


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Test4 Pre-test setup
//Any pre-test setup code should go here, before the timer starts

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Run Test4

//Test4
test4_start_time = get_timer();

repeat(test_iterations)
{
    nn = gpu_noise_create(0, 0, 1024, 1024);
    gpu_noise_free(nn);
}
test4_end_time   = get_timer();


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Test5 Pre-test setup
//Any pre-test setup code should go here, before the timer starts

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Run Test5

//Test5
test5_start_time = get_timer();

repeat(test_iterations)
{
    nn = gpu_noise_create(0, 0, 2048, 2048);
    gpu_noise_free(nn);
}
test5_end_time   = get_timer();


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calculate Test results
var order = ds_list_create();
test1_run_time = test1_end_time - test1_start_time;
ds_list_add(order, test1_run_time);
test2_run_time = test2_end_time - test2_start_time;
ds_list_add(order, test2_run_time);
test3_run_time = test3_end_time - test3_start_time;
ds_list_add(order, test3_run_time);
test4_run_time = test4_end_time - test4_start_time;
ds_list_add(order, test4_run_time);
test5_run_time = test5_end_time - test5_start_time;
ds_list_add(order, test5_run_time);

faster = "Neither" 
order = ds_list_sort(order, true);

if (order[|0] == test1_run_time) faster = Test1Name;
if (order[|0] == test2_run_time) faster = Test2Name;
if (order[|0] == test3_run_time) faster = Test3Name;
if (order[|0] == test4_run_time) faster = Test4Name;
if (order[|0] == test5_run_time) faster = Test5Name;

ds_list_destroy(order);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Compose findings
run_complete_message =  string(Test1Name) + " took: " + string(test1_run_time) + " microseconds (avg " + string_format(test1_run_time/test_iterations, -1, 8) + " microseconds per iteration)#" + 
                        string(Test2Name) + " took: " + string(test2_run_time) + " microseconds (avg " + string_format(test2_run_time/test_iterations, -1, 8) + " microseconds per iteration)#" + 
                        string(Test3Name) + " took: " + string(test3_run_time) + " microseconds (avg " + string_format(test3_run_time/test_iterations, -1, 8) + " microseconds per iteration)#" + 
                        string(Test4Name) + " took: " + string(test4_run_time) + " microseconds (avg " + string_format(test4_run_time/test_iterations, -1, 8) + " microseconds per iteration)#" + 
                        string(Test5Name) + " took: " + string(test5_run_time) + " microseconds (avg " + string_format(test5_run_time/test_iterations, -1, 8) + " microseconds per iteration)##"  + 
                        string(faster) + " was faster.##" +
                        "Press 'Enter' key to run the test again.#" + 
                        "Press 'R' key to re-start the game.";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update control state
state = test_run_complete;
started = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>(state == test_running) &amp;&amp; !started</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>started = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(font0);
draw_set_color(c_black);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
                          
switch state
{
    case instructions:      var instr_x, instr_y;
                            instr_x = 10; instr_y = 10;
                            
                            draw_text_ext(instr_x, instr_y, instructions_message, 20, room_width-20); 
                            
                            instr_y += string_height_ext(instructions_message, 20, room_width-20);
                            
                            if(draw_text_clickable(instr_x, instr_y, string(test_source_url)))
                            {url_open_ext(test_source_url, "_blank");}
                            
                            instr_y+=string_height(string(test_source_url));
                            draw_text_ext(instr_x, instr_y, "##" +
                                                            string(additional_instructions_text) + " ##", 20, room_width-20);
                                                            
                            instr_y+=string_height(string(test_source_url) + "##" +
                                                            string(additional_instructions_text) + " ##");
                                                        
                            draw_text(instr_x, instr_y, "Built with ");
                            instr_x+=string_width("Built with ");
                            
                            if(draw_text_clickable(instr_x, instr_y, "Simple Performance Test framework"))
                            {url_open_ext(SPT_marketplace_url, "_blank");}
                            
                            instr_x+=string_width("Simple Performance Test framework");
                            draw_set_color(c_black);
                            draw_text(instr_x, instr_y, " by ");
                            instr_x+=string_width(" by ");                            
                            
                            if(draw_text_clickable(instr_x, instr_y, SPT_author_twitter))
                            {url_open_ext("https://twitter.com/csanyk", "_blank");}
                            instr_x+=string_width(SPT_author_twitter);

                            draw_set_color(c_black);
                            draw_text(instr_x, instr_y, "|");
                            instr_x+=string_width("|");
                            
                            if(draw_text_clickable(instr_x, instr_y, "csanyk.com"))
                            {url_open_ext(SPT_author_website, "_blank");}
                            
                            break;
    
    case test_running:      draw_text_ext(10,10,test_running_message, 20, room_width-20); 
                            break;
    
    case test_run_complete: draw_text_ext(10,10,run_complete_message, 20, room_width-20); 
                            break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update control state

/*
Test run is triggered by the press Enter event, but are actually run in the Step event.
This is so that the screen may be updated with a "tests are running please wait" message 
one step before the step when the tests are actually run.
*/

state = test_running;
started = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
