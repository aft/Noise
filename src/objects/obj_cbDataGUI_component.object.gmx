<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1001</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_cbDataGUI_1x1</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/**
 * &lt;p&gt;This is the object that creates textbox, slider, dropdown
 * etc. gui elements on the gui.&lt;/p&gt;

 * Currently GUI elements are:
 * &lt;ul&gt;&lt;li&gt;Textbox (for string), &lt;/li&gt;
 * &lt;li&gt;Slider (for number)&lt;/li&gt;
 * &lt;li&gt;Checkbox (for boolean)&lt;/li&gt;
 * &lt;li&gt;Button (for executing a script)&lt;/li&gt;
 * &lt;li&gt;Color picker (for color)&lt;/li&gt;
 * &lt;li&gt;Folder (to organize the elements listed above)&lt;/li&gt;&lt;/ul&gt;

 * &lt;p&gt;A component is added to the gui by using scr_cbDataGUI_add script.&lt;/p&gt;

 * &lt;p&gt;Each component can have a tooltip optionally. To add a tooltip, 
 * use scr_cbDataGUI_set_tooltip() script.&lt;/p&gt;

 * &lt;p&gt;Each component can have a callback script attached optinally. These
 * scripts are called when there is a value change. To attach a callback
 * script to a component, use scr_cbDataGUI_set_on_change_cb() script.&lt;/p&gt;
 *
 */

_c = obj_cbDataGUI_controller;
_type = undefined;
_indent = 0;
_row = 0;
_name = "";
_topPadding = 4;

_tooltip = noone;
_target = noone;
_targetVariable = undefined;
_component = undefined; // cbGUI object
_multiple = undefined;
_maxTextW = 100;

image_xscale = _c._colorW + _c._padding + _c._labelW;
image_yscale = _c._rowH;

image_speed = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw GUI
if (!_c._isOpen) exit;

x = _c.x;
y = _c.y + (_c._rowH * _row) + _c._presetH;

// row bg
draw_set_alpha(1);
draw_set_color(global._cbColors[_cbDataGUIColor.row]);
draw_rectangle(x + _indent * _c._folderIndent, y, x + _c._bodyW, y + _c._rowH - 1, false);

// seperator
draw_set_color(global._cbColors[_cbDataGUIColor.seperator]);
draw_rectangle(x + _indent * _c._folderIndent, y + _c._rowH - 1, x + _c._bodyW, y + _c._rowH - 1, false);

switch (_type) {

    case (cbData_type.text):
        draw_set_color(global._cbColors[_cbDataGUIColor.text]);
        draw_rectangle(x + _indent * _c._folderIndent, y, x + _c._colorW + _indent * _c._folderIndent, y + _c._rowH - 1, false);
        
        draw_set_color(global._cbColors[_cbDataGUIColor.label]);
        draw_set_font(_c.font);
        draw_set_halign(fa_left);
        draw_set_valign(fa_middle);
        draw_text(x + _indent * _c._folderIndent + _c._colorW + _c._padding, y + _c._rowH / 2, _name);
        
        _component.x = x + _c._bodyW - 150;
        _component.y = y + _topPadding;
        break;
    
    case (cbData_type.number):
        draw_set_color(global._cbColors[_cbDataGUIColor.number]);
        draw_rectangle(x + _indent * _c._folderIndent, y, x + _c._colorW + _indent * _c._folderIndent, y + _c._rowH - 1, false);
        
        draw_set_color(global._cbColors[_cbDataGUIColor.label]);
        draw_set_font(_c.font);
        draw_set_halign(fa_left);
        draw_set_valign(fa_middle);
        draw_text(x + _indent * _c._folderIndent + _c._colorW + _c._padding, y + _c._rowH / 2, _name);
        
        if (_multiple != undefined) {
            _component.x = x + _c._bodyW - 150;
            _component.y = y + _topPadding;
        } else {
            _component[@0].x = x + _c._bodyW - 150;
            _component[@0].y = y + _topPadding;
            
            _component[@1].x = x + _c._bodyW - 52;
            _component[@1].y = y + _topPadding;
        }
        break;
        
    case (cbData_type.boolean):
        draw_set_color(global._cbColors[_cbDataGUIColor.boolean]);
        draw_rectangle(x + _indent * _c._folderIndent, y, x + _c._colorW + _indent * _c._folderIndent, y + _c._rowH - 1, false);
        
        draw_set_color(global._cbColors[_cbDataGUIColor.label]);
        draw_set_font(_c.font);
        draw_set_halign(fa_left);
        draw_set_valign(fa_middle);
        draw_text(x + _indent * _c._folderIndent + _c._colorW + _c._padding, y + _c._rowH / 2, _name);
        
        _component.x = x + _c._bodyW - 150;
        _component.y = y + _topPadding;
        break;
        
    case (cbData_type.function):
        draw_set_color(global._cbColors[_cbDataGUIColor.function]);
        draw_rectangle(x + _indent * _c._folderIndent, y, x + _c._colorW + _indent * _c._folderIndent, y + _c._rowH - 1, false);
        
        _component.x = x + _indent * _c._folderIndent+ _c._colorW + _c._padding;
        _component.y = y + _topPadding;
        break;
        
    case (cbData_type.color):
        draw_set_color(_component.value);
        draw_rectangle(x + _indent * _c._folderIndent, y, x + _c._colorW + _indent * _c._folderIndent, y + _c._rowH - 1, false);
        
        draw_set_color(global._cbColors[_cbDataGUIColor.label]);
        draw_set_font(_c.font);
        draw_set_halign(fa_left);
        draw_set_valign(fa_middle);
        draw_text(x + _indent * _c._folderIndent + _c._colorW + _c._padding, y + _c._rowH / 2, _name);

        _component.x = x + _c._bodyW - 150;
        _component.y = y + _topPadding;
        break;
        
}

if (_tooltip != noone) {
    switch (_type) {
        case cbData_type.function:
            _tooltip.x = x + _c._bodyW - 17;
            _tooltip.y = y + _topPadding + 6;
            break;
        default:
            _tooltip.x = x + _c._bodyW - 164;
            _tooltip.y = y + _topPadding + 5;
            break;
    }
    
}

/*
if (_c._debug) {
    draw_set_alpha(.5);
    draw_set_color(c_red);
    draw_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, false);
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw nothing
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
