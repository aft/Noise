<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cbDataGUI_tooltip_icon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/**
* &lt;p&gt;Tooltip is an optional feature of cbDataGUI.&lt;/p&gt;

* &lt;p&gt;To add a tooltip to a component, use scr_cbDataGUI_set_tooltip()
* script.&lt;/p&gt;

*/

_variable = "";
_object = "";
_component = noone;
_description = "";
alpha = 0;
_mouseOver = false;

rotation = 0;
_padding = 12;
_bodyW = 200;
_descY = 40;
_lineHeight = 12;
_px = 0;
_py = 0;
_pd = 0;
_pax = _bodyW - 4; // popup arrow x
_pay = 15; // popup arrow y
_fading = false;
_gw = display_get_gui_width(); // cache for perf

sprite_tooltip = spr_cbDataGUI_tooltip;
sprite_tooltip_seperator = spr_cbDataGUI_tooltip_seperator;
sprite_tooltip_arrow = spr_cbDataGUI_tooltip_arrow;
sprite_tooltip_icon = spr_cbDataGUI_tooltip_icon;

font = cbDataGUIFont;
font_title = cbDataGUIFontBold;



image_speed = 0;

alarm[1] = 1; // run alarm1 to calc popup position
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sets tooltip popup position with a low priority.

if (_component != noone) {
    if (_component.x &lt; _gw/2) {
        _pd = 2; // POPUP ON LEFT SIDE
    } else {
        _pd = 0; // POPUP ON RIGHT SIDE
    }
    
    switch (_pd) {
        case 0:
            _px = _component.x - _bodyW - 10;
            _py = _component.y - 4;
            _pax = _bodyW - 4;
            _pay = round(_component._c._rowH / 2);
            break;
        case 2:
            _px = _component.x + _component._c._bodyW + 10;
            _py = _component.y - 4;
            _pax = -6;
            _pay = round(_component._c._rowH / 2);
            break;
    }
    
}

alarm[1] = 10; // once every 10 frames
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Show/hide fade anim
switch (_mouseOver) {
    case true:
        alpha += 0.15;
        if (alpha &lt; 1) alarm[0] = 1;
        else alpha = 1;
        break;
    
    case false:
        alpha -= 0.15;
        if (alpha &gt; 0) alarm[0] = 1;
        else alpha = 0;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!visible) exit;

// gui mouse
var gui_mouse_x = device_mouse_x_to_gui(0);
var gui_mouse_y = device_mouse_y_to_gui(0);

if ((rotation mod 360) != 0) {
    _nx = cos(degtorad(rotation)) * (gui_mouse_x - x) - sin(degtorad(rotation)) * (gui_mouse_y - y) + x;
    _ny = sin(degtorad(rotation)) * (gui_mouse_x - x) + cos(degtorad(rotation)) * (gui_mouse_y - y) + y;
} else {
    _nx = gui_mouse_x;
    _ny = gui_mouse_y;
}

// for depth tracking
scr_cbGUI_track_depth_step(_nx, _ny);

if (position_meeting(_nx, _ny, self) &amp;&amp; !_mouseOver) {
    if (scr_cbGUI_mouse(true)) {
        _mouseOver = true;
        if (alarm_get(0) &lt;= 0) alarm[0] = 5;
    }
}

if (!position_meeting(_nx, _ny, self) &amp;&amp; _mouseOver) {
    _mouseOver = false;
    if (alarm_get(0) &lt;= 0) alarm[0] = 5;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// ICON
if (_mouseOver) draw_set_alpha(1);
else draw_set_alpha(.5);
draw_sprite(sprite_tooltip_icon, 0, x, y);

// POPUP
if (alpha != 0) {
    
    d3d_transform_set_identity();
    d3d_transform_set_rotation_z(rotation);
    d3d_transform_add_translation(_px, _py, 0);
    
        draw_set_alpha(alpha);
        
        // tooltip body
        var hh = string_height_ext(_description, _lineHeight, _bodyW - _padding*2);
        scr_draw_9slices_ext(sprite_tooltip, 0, 0, 0, _bodyW, _descY + hh + _padding, c_white, alpha);
        
        // tooltip title
        draw_set_font(font_title);
        draw_set_colour(global._cbColors[_cbDataGUIColor.button]);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_text(_padding, _padding-4, _variable); 
    
        // seperator
        draw_sprite_part_ext(sprite_tooltip_seperator, 0, 0, 0,
                            _bodyW - _padding*2, 2, _padding, 31, 1, 1,
                            c_white, alpha);
        
        // description
        draw_set_font(font);
        draw_set_colour(global._cbColors[_cbDataGUIColor.button]);
        draw_text_ext(_padding, _descY, _description, _lineHeight, _bodyW - _padding*2); 
        
        // arrow
        draw_sprite_ext(sprite_tooltip_arrow, _pd, _pax, _pay, 1, 1, 0, c_white, alpha);
             
    d3d_transform_set_identity();

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Do nothing
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
