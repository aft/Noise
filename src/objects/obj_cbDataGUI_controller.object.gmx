<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_cbDataGUI_1x1</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/**
* &lt;p&gt;This object is created automatically when there is an cbDataGUI 
* component is added. You don't need to do anything.&lt;/p&gt;
 
* &lt;p&gt;You can ONLY have one controller object in a room. This means
* you can only have one cbDataGUI in a room.&lt;/p&gt;

* &lt;p&gt;If you would like to create the instance of this object manually,
* drag and drop it to the room editor or use scr_cbDataGUI_create().&lt;/p&gt;

* &lt;p&gt;The location of the object does not matter. It is always created
* on the right side of the display by default. It can be moved
* by the user clicking the middle button on it.&lt;/p&gt;
*
*/

_component_array[0] = undefined;
rotation = 0;

_bodyW = 245;
_bodyH = 0;
_rowH = 28;
_padding = 4;
_folderIndent = 5;
_buttonH = 28;
_colorW = 3;
_labelW = 84;
_rowCount = -1;
_xOffset = 0;
_yOffset = 0;
_isOpen = true;
_isDragging = false;

_usePresets = false;
_presetObj = noone;
_presetH = 0;

font = cbDataGUIFont;


guiSize = 1;
x = (display_get_gui_width()/guiSize - _bodyW);
y = 0;

image_speed = 0;

_debug = false;

_flat = ds_map_create(); // internal tmp

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (_presetObj == noone &amp;&amp; _usePresets) {
    // create preset object and set _presetObj
    var obj = instance_create(x, y, obj_cbDataGUI_preset);
    _presetObj = obj;
    _presetH = obj._bodyH;

} else if (_presetObj != noone &amp;&amp; !_usePresets) {
    // destroy object
    if (instance_exists(_presetObj)) {
        // Using 'with' for 1.4 compatibility
        with (_presetObj) instance_destroy();
    }
    _presetObj = noone;
    _presetH = 0;

} 

// for gui mouse x &amp; y
var gui_mouse_x = device_mouse_x_to_gui(0);
var gui_mouse_y = device_mouse_y_to_gui(0);

if ((rotation mod 360) != 0) {
    _nx = cos(degtorad(rotation)) * (gui_mouse_x - x) - sin(degtorad(rotation)) * (gui_mouse_y - y) + x;
    _ny = sin(degtorad(rotation)) * (gui_mouse_x - x) + cos(degtorad(rotation)) * (gui_mouse_y - y) + y;
} else {
    _nx = gui_mouse_x;
    _ny = gui_mouse_y;
}

// for depth tracking
scr_cbGUI_track_depth_step(_nx, _ny);

// middle button down
if (position_meeting(_nx, _ny, self) &amp;&amp; mouse_check_button(mb_middle) &amp;&amp; !_isDragging) {
    _xOffset = _nx - x;
    _yOffset = _ny - y;
    _isDragging = true;
}
// middle button down
if (mouse_check_button(mb_middle) &amp;&amp; _isDragging) {
    x = _nx - _xOffset;
    y = _ny - _yOffset;
    window_set_cursor(cr_size_all);
}

if (_isDragging &amp;&amp; mouse_check_button_released(mb_middle)) {
    _isDragging = false;
    window_set_cursor(cr_default);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var hh = 0;
if (_isOpen) hh = _bodyH;

if (point_in_rectangle(_nx, _ny, x, y + hh - _rowH, x + _bodyW, y + hh + _rowH - 3)) {
    if (scr_cbGUI_mouse(true)) _scr_cbDataGUI_togglegui();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1);
draw_set_font(font);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

if (_isOpen) {
    // close button
    draw_set_color(global._cbColors[_cbDataGUIColor.row]);
    draw_rectangle(x, y + _bodyH - _rowH, x + _bodyW, y + _bodyH - 6, false);
    
    draw_set_color(global._cbColors[_cbDataGUIColor.label]);
    draw_text(x + _bodyW / 2, y + _bodyH - _rowH / 2 - 3, "Hide Controls");

} else {
    // close button
    draw_set_color(global._cbColors[_cbDataGUIColor.row]);
    draw_rectangle(x, y, x + _bodyW, y + _rowH - 6, false);
    
    draw_set_color(global._cbColors[_cbDataGUIColor.label]);
    draw_text(x + _bodyW / 2, y + _rowH / 2 - 3, "Show Controls");
}


/*
// bounding box
draw_set_alpha(.4);
draw_set_colour(c_white);
draw_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, false);
*/



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw nothing
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
