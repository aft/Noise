<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1001</depth>
  <persistent>0</persistent>
  <parentName>obj_cbDataGUI_component</parentName>
  <maskName>spr_cbDataGUI_1x1</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/**
* &lt;p&gt;You may use folders to organize your cbDataGUI components optionally.
* Folders are created by using scr_cbDataGUI_add_folder() scripts.&lt;/p&gt;

* &lt;p&gt;Folder instance needs to be created before creating the gui component
* because you specify which folder the component is going to be in
* using the component add script with an argument.&lt;/p&gt;

* &lt;p&gt;Example Code:&lt;/p&gt;
* &lt;pre&gt;var folder_flow = scr_cbDataGUI_add_folder("Flow");
* scr_cbDataGUI_add(obj, "message", cbData_type.text, folder_flow);&lt;/pre&gt;

* &lt;p&gt;If a component is not going to be in a folder, -1 value needs to be
* passed for the folder argument.&lt;/p&gt;

* &lt;p&gt;Example Code: &lt;/p&gt;
* &lt;pre&gt;scr_cbDataGUI_add(obj, "message", cbData_type.text, -1);&lt;/pre&gt;

* &lt;p&gt;Folders can be opened and closed using scr_cbDataGUI_open_folder() script.&lt;/p&gt;
*/

event_inherited();

_folder = undefined;
_folderItems[0] = undefined;
_isOpen = true;

image_xscale = _c._bodyW;
image_yscale = _c._rowH;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!visible) exit;

// gui mouse
var gui_mouse_x = device_mouse_x_to_gui(0);
var gui_mouse_y = device_mouse_y_to_gui(0);

// for depth tracking
scr_cbGUI_track_depth_step(gui_mouse_x, gui_mouse_y);

if (position_meeting(gui_mouse_x, gui_mouse_y, self)) {
    if (scr_cbGUI_mouse(mouse_check_button_pressed(mb_left))) {
        _isOpen = !_isOpen;
        for (var k=0; k &lt; array_length_1d(_folderItems); k++) {
            _scr_cbDataGUI_makevisible(_folderItems[k], _isOpen);
        }
        _scr_cbDataGUI_processrows();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw GUI Folder
if (!_c._isOpen) exit;

x = _c.x;
y = _c.y + (_c._rowH * _row) + _c._presetH;

// row bg
draw_set_alpha(1);
draw_set_color(global._cbColors[_cbDataGUIColor.row]);
draw_rectangle(x + _indent * _c._folderIndent, y, x + _c._bodyW, y + _c._rowH - 1, false);

// seperator
draw_set_color(global._cbColors[_cbDataGUIColor.seperator]);
draw_rectangle(x + _indent * _c._folderIndent, y + _c._rowH - 1, x + _c._bodyW, y + _c._rowH - 1, false);

var sprIndex = 0;
if (_isOpen) sprIndex = 1;

draw_sprite_ext(spr_cbDataGUI_folder_arrow, sprIndex, x + _indent * _c._folderIndent + _c._colorW *2, y + _c._rowH / 2 - sprite_get_height(spr_cbDataGUI_folder_arrow) / 2, 1, 1, 0, c_white, 1);
draw_set_color(global._cbColors[_cbDataGUIColor.label]);
draw_set_font(_c.font);
draw_set_halign(fa_left);
draw_set_valign(fa_middle);
draw_text(x + _indent * _c._folderIndent + _c._colorW * 2  + _c._padding + sprite_get_width(spr_cbDataGUI_folder_arrow), y + _c._rowH / 2, _name);

/*
if (_c._debug) {
    draw_set_alpha(.5);
    draw_set_color(c_red);
    draw_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, false);
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw nothing
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
