<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cbGUI_slider</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_cbGUI_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

_type = 1;

value = undefined;
minLimit = undefined;
maxLimit = undefined;
previousValue = undefined;
_stepValue = undefined;
_perc = 0;
_cursorX = 0;

disabled = false;
_onFocus = false;
_changed = false;
_released = false;
_dragging = false;

c_indicator = make_color_rgb(151, 203, 255);
c_foutIndicator = make_color_rgb(120, 120, 120);
c_disabledIndicator = make_color_rgb(80, 80, 80);

// sprite properties
sprite_index     = spr_cbGUI_slider;
sprite_indicator = spr_cbGUI_slider_i;
sprite_button    = spr_cbGUI_slider_btn;
showButton = true;

//scale of the slider and indicator
hPadding = 1;
vPadding = 1;

_sliderW = 220;
_sliderH = sprite_height;

_scr_slider_calcsizes();
// scale ends

onChangeCallbackScript  = undefined;
onChangeCallbackScript2 = undefined;
onReleaseCallbackScript = undefined;
_oCargs  = undefined;
_oCargs2 = undefined;
_oRargs  = undefined;

_scr_slider_setvalue(irandom_range(0, 100));
_scr_slider_setrange(0, 100);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// step

if (disabled) exit; // skip if disabled
if (!visible) exit;
//if (!_onFocus &amp;&amp; mouse_check_button(mb_left)) exit;

event_inherited();

_scr_slider_step_mouse();

_scr_cbGUI_remote_handler();
_scr_cbGUI_onChange_cb_handler_x2();
_scr_cbGUI_onRelease_cb_handler();



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///unfocus all sliders in the room
// unless dragging is started
if (!_dragging) _onFocus = false;

if (disabled) exit;
if (!visible) exit;

if (position_meeting(_nx, _ny, self) &amp;&amp; !_onFocus) {
    if (scr_cbGUI_mouse(mouse_check_button_pressed(mb_left))) {
        _scr_cbGUI_setactive();
        _dragging = true;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// image 0 - normal
// image 1 - focus
// image 2 - disabled
_scr_slider_calcindicator();

var indicatorColor;

if (_onFocus) {
    image_index = 1;
    indicatorColor = c_indicator;
} else if (disabled) {
    image_index = 2
    indicatorColor = c_disabledIndicator;
} else {
    image_index = 0;
    indicatorColor = c_foutIndicator;
}

d3d_transform_set_identity();
d3d_transform_set_rotation_z(rotation);
d3d_transform_add_translation(x, y, 0);
   
    // draw slider
    var sw = sprite_get_width(sprite_index)/3;
    draw_sprite_part_ext(sprite_index, image_index, 0,   0, sw, sprite_height, 0, 0, 1,  1, c_white, alpha);
    draw_sprite_part_ext(sprite_index, image_index, sw,  0, sw, sprite_height, sw, 0, (_sliderW-2*sw)/sw, 1, c_white, alpha);
    draw_sprite_part_ext(sprite_index, image_index, sw*2,0, sw, sprite_height, _sliderW-sw, 0, 1,  1, c_white, alpha);
    
    // draw indicator
    var iw = _iW*_perc;
    draw_set_alpha(alpha);
    if (_cursorX &gt; hPadding) {
        if (!is_undefined(sprite_indicator)) {
            var siw = sprite_get_width(sprite_indicator)/3;
            var sih = sprite_get_height(sprite_indicator);
            if (iw &lt;= siw) draw_sprite_part_ext(sprite_indicator, image_index, 0,    0,  siw, sih,   hPadding,    vPadding, iw/siw,  1, c_white, alpha);
            else draw_sprite_part_ext(sprite_indicator, image_index, 0,    0,  siw, sih,   hPadding,              vPadding, 1,  1, c_white, alpha);
            if (iw &gt; siw) {
                if (iw &lt;= _iW-hPadding-siw) draw_sprite_part_ext(sprite_indicator, image_index, siw,  0,  siw, sih,   hPadding+siw, vPadding, (iw-siw)/siw, 1, c_white, alpha);
                else draw_sprite_part_ext(sprite_indicator, image_index, siw,  0,  siw, sih,   hPadding+siw, vPadding, (_iW-hPadding-2*siw)/siw, 1, c_white, alpha);
            }
            if (iw &gt; _iW-siw) draw_sprite_part_ext(sprite_indicator, image_index, siw*2, 0,  siw, sih, _iW-siw, vPadding, (iw-(_iW-siw))/siw,  1, c_white, alpha);
        } else {
            draw_set_color(indicatorColor);
            draw_rectangle(hPadding, vPadding, (_iW-1)*_perc, _iH-1, false);
        }    
    }

    // draw button
    if (showButton) {
        draw_sprite_ext(sprite_button, image_index, iw, floor(_sliderH/2), 1, 1, 0, c_white, alpha);
    }


/*
    // debug
    draw_set_font(cbGUIDebugFont);
    draw_set_colour(c_black);
    draw_set_halign(fa_left);
    draw_text(0, 34, "v:"+string(value)+ ", " + 
                     "p:"+string(_perc)+ ", " +
                     "c:"+string(_cursorX)+ ", " +
                     string(_iW) + ", " + string(iw) + ", " + string(_sliderW)
                     );    
*/
d3d_transform_set_identity();
/*
// bbox
draw_set_color(c_red);
draw_set_alpha(.5);
draw_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, false);

*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Do nothing

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///keyboard interactions
event_inherited();

if (disabled) exit; // skip if disabled
if (!visible) exit;
if (!_onFocus) exit; // skip if not on focus

var k = keyboard_lastkey;

// for arrow keys
var changeAmount;
if (_stepValue == undefined) changeAmount = 1;
else changeAmount = _iW / abs(maxLimit-minLimit) / _stepValue;
        
switch (k) {

    case (vk_escape): 
        // cancel
        _onFocus = false;
        // changed
        break;
                 
    case (vk_left):
        // fast decrement
        if (keyboard_check(vk_shift)) changeAmount *= 5;
        
        // slow decrement
        _scr_slider_setcursorpos(_cursorX-1*changeAmount);
        break;

                    
    case (vk_right):
        // fast increment
        if (keyboard_check(vk_shift)) changeAmount *= 5;
        
        // slow increment
        _scr_slider_setcursorpos(_cursorX+1*changeAmount);
        break;    

                
    case (vk_up): case (vk_home):
        // go to min value
        _scr_slider_setvalue(minLimit);
        break;

                
    case (vk_down): case (vk_end): 
        // go to max value
        _scr_slider_setvalue(maxLimit);
        break;
}

keyboard_lastkey = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
